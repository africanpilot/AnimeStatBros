import React, { useRef, useEffect } from 'react';
import * as d3 from 'd3';
import '../../assets/timeseries4.css';
import data from '../../data/climate4.csv';


function TimeseriesChart(){
    const ref = useRef();

    useEffect(() => {
        drawChart();
    }, [data]);

    const drawChart = () => {
        var margin = {top: 10, right: 10, bottom: 100, left: 40},
            margin2 = {top: 430, right: 10, bottom: 20, left: 40},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom,
            height2 = 500 - margin2.top - margin2.bottom;

        const svg = d3.select(ref.current)
            .attr("width",width+margin.left+margin.right)
            .attr("height",height+margin.top+margin.bottom);
        
        var color = d3.scaleOrdinal(d3.schemeCategory10);
        
        var parseDate = d3.timeParse("%b %Y");
        
        var x = d3.scaleTime().range([0, width]),
            x2 = d3.scaleTime().range([0, width]),
            y = d3.scaleLinear().range([height, 0]),
            y2 = d3.scaleLinear().range([height2, 0]);
        
        var xAxis = d3.axisBottom(x),
            xAxis2 = d3.axisBottom(x2),
            yAxis = d3.axisLeft(y);
        
        var brush = d3.brushX()
            .extent([[0, 0], [width, height2]])
            .on("brush", brush);
        
        var line = d3.line()
            .defined(function(d) { return !isNaN(d.temperature); })
            .curve(d3.curveMonotoneX)
            .x(function(d) { return x(parseDate(d.date)); })
            .y(function(d) { return y(d.temperature); });
        
        var line2 = d3.line()
            .defined(function(d) { return !isNaN(d.temperature); })
            .curve(d3.curveMonotoneX)
            .x(function(d) {return x2(parseDate(d.date)); })
            .y(function(d) {return y2(d.temperature); });
        

        svg.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height);
        
        var focus = svg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            
        var context = svg.append("g")
        .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
        
        d3.csv(data, function(error, data) {
        
        color.domain(d3.map(data[0]).filter(function(key) { return key !== "date"; }));
        
        var sources = color.domain().map(function(name) {
            return {
                name: name,
                values: data.map(function(d) {
                return {date: parseDate(d.date), temperature: +d[name]};
                })
            };
            });
        
            x.domain(d3.extent(data, function(d) { return parseDate(d.date); }));
            y.domain([d3.min(sources, function(c) { return d3.min(c.values, function(v) { return v.temperature; }); }),
                    d3.max(sources, function(c) { return d3.max(c.values, function(v) { return v.temperature; }); }) ]);
            x2.domain(x.domain());
            y2.domain(y.domain());
            
            var focuslineGroups = focus.selectAll("g")
                .data(sources)
            .enter().append("g");
            
            var focuslines = focuslineGroups.append("path")
                .attr("class","line")
                .attr("d", function(d) { return line(d.values); })
                .style("stroke", function(d) {return color(d.name);})
                .attr("clip-path", "url(#clip)");
            
            focus.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);
        
            focus.append("g")
                .attr("class", "y axis")
                .call(yAxis);
                
            var contextlineGroups = context.selectAll("g")
                .data(sources)
            .enter().append("g");
            
            var contextLines = contextlineGroups.append("path")
                .attr("class", "line")
                .attr("d", function(d) { return line2(d.values); })
                .style("stroke", function(d) {return color(d.name);})
                .attr("clip-path", "url(#clip)");
        
            context.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height2 + ")")
                .call(xAxis2);
        
            context.append("g")
                .attr("class", "x brush")
                .call(brush)
            .selectAll("rect")
                .attr("y", -6)
                .attr("height", height2 + 7);
                
                
        });
        
        function brush() {
        x.domain(brush.empty() ? x2.domain() : brush.extent());
        focus.selectAll("path.line").attr("d",  function(d) {return line(d.values)});
        focus.select(".x.axis").call(xAxis);
        focus.select(".y.axis").call(yAxis);
        }
        
    }

    return (

            <svg ref={ref}>
            </svg>

    )
}

export default TimeseriesChart;